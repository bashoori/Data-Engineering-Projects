ðŸ“˜ Cheat Sheet: APIs and Data Collection
==================================================

ðŸ”¹ **Accessing element attribute**
   - Description: Access the value of a specific attribute of an HTML element
   - Code Example: `attribute = element["attribute"]`

ðŸ”¹ **BeautifulSoup()**
   - Description: Parse the HTML content using BeautifulSoup
   - Code Example: `soup = BeautifulSoup(html, "html.parser")`

ðŸ”¹ **delete()**
   - Description: Send a DELETE request to remove a resource
   - Code Example: `response = requests.delete(url)`

ðŸ”¹ **find()**
   - Description: Find the first HTML element matching the tag and attributes
   - Code Example: `element = soup.find(tag, attrs)`

ðŸ”¹ **find_all()**
   - Description: Find all HTML elements matching the tag and attributes
   - Code Example: `elements = soup.find_all(tag, attrs)`

ðŸ”¹ **findChildren()**
   - Description: Find all child elements of an HTML element
   - Code Example: `children = element.findChildren()`

ðŸ”¹ **get()**
   - Description: Perform a GET request to retrieve data
   - Code Example: `response = requests.get(url)`

ðŸ”¹ **Headers**
   - Description: Include custom headers in the request
   - Code Example: `headers = {"Authorization": "Bearer YOUR_TOKEN"}`

ðŸ”¹ **Import Libraries**
   - Description: Import necessary Python libraries for web scraping
   - Code Example: `from bs4 import BeautifulSoup`

ðŸ”¹ **json()**
   - Description: Parse JSON data from response
   - Code Example: `data = response.json()`

ðŸ”¹ **next_sibling()**
   - Description: Find the next sibling element in the DOM
   - Code Example: `sibling = element.find_next_sibling()`

ðŸ”¹ **parent**
   - Description: Access the parent element in the DOM
   - Code Example: `parent = element.parent`

ðŸ”¹ **post()**
   - Description: Send a POST request to submit data
   - Code Example: `response = requests.post(url, data={"key": "value"})`

ðŸ”¹ **put()**
   - Description: Send a PUT request to update data
   - Code Example: `response = requests.put(url, data={"key": "value"})`

ðŸ”¹ **Query parameters**
   - Description: Pass query parameters in the URL
   - Code Example: `params = {"page": 1, "per_page": 10}`

ðŸ”¹ **select()**
   - Description: Select HTML elements using CSS selector
   - Code Example: `element = soup.select("selector")`

ðŸ”¹ **status_code**
   - Description: Check HTTP status code of response
   - Code Example: `status_code = response.status_code`

ðŸ”¹ **tags for find()/find_all()**
   - Description: Specify valid HTML tags to search elements
   - Code Example: `(a), (p), (h1-h6), (table), (tr), (td), (th), (img), (form), (button)`

ðŸ”¹ **text**
   - Description: Retrieve the text content of an HTML element
   - Code Example: `text = element.text`

